pipeline {
    agent any

    environment {
        IMAGE_REPOSITORY_NAME = "ct5179-capstone-project"
        IMAGE_NAME = "spring-boot-backend"
        IMAGE_TAG = "latest"

        DB_ROOT_PASSWORD = credentials('mysql-root-password')
    }

    stages {
        stage ("Clean") {
            steps {
                timeout(time: 5, unit: "MINUTES") {
                    dir('backend') {
                        sh "mvn clean"
                    }
                }
            }
        }

        stage ("Package") {
            steps {
                timeout(time: 5, unit: "MINUTES") {
                    dir('backend') {
                        sh "mvn package"
                    }
                }
            }
        }

        stage ("Build Docker Image") {
            steps {
                timeout(time: 10, unit: "MINUTES") {
                    dir('backend') {
                        sh '''
                        DOCKER_BUILDKIT=1 docker build \
                            -t ${IMAGE_NAME}:${IMAGE_TAG} \
                            -f delivery/Dockerfile .
                    '''
                    }
                }
            }
        }

        stage ("Stop and Remove Existing Container") {
            steps {
                timeout(time: 5, unit: "MINUTES") {
                    script {
                        try {
                            sh "docker stop ${IMAGE_NAME}"
                        } catch (err) {
                            echo "No running container found with name ${IMAGE_NAME}"
                        }
                        sh "docker rm -f ${IMAGE_NAME}"
                    }
                }
            }
        }

        stage ("Deploy Container") {
            steps {
                timeout(time: 5, unit: "MINUTES") {
                    dir('backend') {
                        sh '''
                        docker run -d \
                            --name ${IMAGE_NAME} \
                            -p 8089:8080 \
                            --build-arg DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD} \
                            ${IMAGE_NAME}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts allowEmptyArchive: true, artifacts: "backend/target/*.jar", fingerprint: true
        }
    }

}